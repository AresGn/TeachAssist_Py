
==================== EXERCICE: Fonction Racine Carrée (ID: 09-fonction-racine-carree) ====================
Found 2 Java files to analyze:

==================================================
✅ RAPPORT D'ANALYSE: tests/java_samples/TD3\Etudiant1\09-fonction-racine-carree.java (Étudiant: Etudiant1)
==================================================

✅ SYNTAXE: Code valide

✅ MÉTHODES REQUISES:
  ✅ calculerRacineCarree(double) -> double

✅ STRUCTURES DE CONTRÔLE:
  ✅ Structures trouvées: if

✅ CONVENTIONS DE NOMMAGE:
  ✅ Toutes les conventions de nommage sont respectées.

✅ PORTÉE DES VARIABLES:
  ✅ Aucun problème de portée de variables détecté.

✅ PATTERNS REQUIS:
  ✅ Vérification que le nombre est positif ou nul
  ✅ Utilisation de Math.sqrt
  ✅ Gestion du cas où le nombre est négatif

==============================
RÉSUMÉ GLOBAL: 7/7 vérifications réussies
NOTE ESTIMÉE: 10.0/10 points

✅ RÉSULTAT GLOBAL: SUCCÈS

==================================================
✅ RAPPORT D'ANALYSE: tests/java_samples/TD3\Etudiant2\09-fonction-racine-carree.java (Étudiant: Etudiant2)
==================================================

✅ SYNTAXE: Code valide

✅ MÉTHODES REQUISES:
  ✅ calculerRacineCarree(double) -> double

❌ STRUCTURES DE CONTRÔLE:
  ❌ Structures manquantes: if

❌ CONVENTIONS DE NOMMAGE:
  ❌ Le nom de variable 'Resultat' ne respecte pas la convention camelCase
  ❌ Le nom de variable 'Compteur' ne respecte pas la convention camelCase

✅ PORTÉE DES VARIABLES:
  ✅ Aucun problème de portée de variables détecté.

⚠️ PATTERNS REQUIS:
  ❌ Vérification que le nombre est positif ou nul
      ⚠️ Vous devez vérifier que le nombre est positif ou nul avant de calculer la racine carrée.
  ✅ Utilisation de Math.sqrt
  ❌ Gestion du cas où le nombre est négatif
      ⚠️ Vous devez gérer le cas où le nombre est négatif en renvoyant une valeur spéciale ou en levant une exception.

⚠️ SUGGESTIONS D'AMÉLIORATION:
  ⚠️ Les structures de contrôle suivantes sont requises mais manquantes: if
  ⚠️ Vérifiez que vos identifiants respectent les conventions de nommage spécifiées.

==============================
RÉSUMÉ GLOBAL: 4/7 vérifications réussies
NOTE ESTIMÉE: 5.7/10 points

❌ RÉSULTAT GLOBAL: DES PROBLÈMES ONT ÉTÉ DÉTECTÉS
  Détail des problèmes:
    ❌ Patterns requis manquants
    ❌ Structures de contrôle manquantes
    ❌ Conventions de nommage non respectées

==================== EXERCICE: Comptage de Mots (ID: 10-comptage-mots) ====================
Found 2 Java files to analyze:

==================================================
✅ RAPPORT D'ANALYSE: tests/java_samples/TD3\Etudiant1\10-comptage-mots.java (Étudiant: Etudiant1)
==================================================

✅ SYNTAXE: Code valide

✅ MÉTHODES REQUISES:
  ✅ compterMots(String) -> int

✅ STRUCTURES DE CONTRÔLE:
  ✅ Structures trouvées: if, for

✅ CONVENTIONS DE NOMMAGE:
  ✅ Toutes les conventions de nommage sont respectées.

✅ PORTÉE DES VARIABLES:
  ✅ Aucun problème de portée de variables détecté.

❌ OPÉRATEURS NON AUTORISÉS:
  ❌ L'opérateur '|' n'est pas autorisé. Utilisez uniquement: ==, !=, +, ++, +=, ||
  ❌ L'opérateur '|' n'est pas autorisé. Utilisez uniquement: ==, !=, +, ++, +=, ||

✅ PATTERNS REQUIS:
  ✅ Gestion des chaînes vides ou nulles
  ✅ Utilisation de split ou StringTokenizer

==============================
RÉSUMÉ GLOBAL: 6/7 vérifications réussies
NOTE ESTIMÉE: 8.6/10 points

❌ RÉSULTAT GLOBAL: DES PROBLÈMES ONT ÉTÉ DÉTECTÉS
  Détail des problèmes:
    ❌ Utilisation d'opérateurs non autorisés

==================================================
✅ RAPPORT D'ANALYSE: tests/java_samples/TD3\Etudiant2\10-comptage-mots.java (Étudiant: Etudiant2)
==================================================

✅ SYNTAXE: Code valide

✅ MÉTHODES REQUISES:
  ✅ compterMots(String) -> int

✅ STRUCTURES DE CONTRÔLE:
  ✅ Structures trouvées: if, for

✅ CONVENTIONS DE NOMMAGE:
  ✅ Toutes les conventions de nommage sont respectées.

✅ PORTÉE DES VARIABLES:
  ✅ Aucun problème de portée de variables détecté.

❌ OPÉRATEURS NON AUTORISÉS:
  ❌ L'opérateur '<' n'est pas autorisé. Utilisez uniquement: ==, !=, +, ++, +=, ||
  ❌ L'opérateur '|' n'est pas autorisé. Utilisez uniquement: ==, !=, +, ++, +=, ||
  ❌ L'opérateur '|' n'est pas autorisé. Utilisez uniquement: ==, !=, +, ++, +=, ||
  ❌ L'opérateur '|' n'est pas autorisé. Utilisez uniquement: ==, !=, +, ++, +=, ||
  ❌ L'opérateur '|' n'est pas autorisé. Utilisez uniquement: ==, !=, +, ++, +=, ||

⚠️ PATTERNS REQUIS:
  ❌ Gestion des chaînes vides ou nulles
      ⚠️ Vous devez vérifier si la chaîne est vide ou null avant de traiter.
  ❌ Utilisation de split ou StringTokenizer
      ⚠️ Vous devriez utiliser split() ou StringTokenizer pour découper la chaîne en mots.

==============================
RÉSUMÉ GLOBAL: 5/7 vérifications réussies
NOTE ESTIMÉE: 7.1/10 points

❌ RÉSULTAT GLOBAL: DES PROBLÈMES ONT ÉTÉ DÉTECTÉS
  Détail des problèmes:
    ❌ Patterns requis manquants
    ❌ Utilisation d'opérateurs non autorisés
