"""
Widget principal pour l'onglet Notes & Feedback.
"""

import os
import logging
import glob
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QMessageBox
from PyQt5.QtCore import Qt

from teach_assit.gui.styles import MAIN_STYLE
from teach_assit.gui.feedback.ui_components import HeaderSection, ExercisesSection, FeedbackSection
from teach_assit.gui.feedback.configuration import ConfigManager, ExerciseIdNormalizer
from teach_assit.gui.feedback.handlers import ExerciseFileLocator, FeedbackHandler, ResultsSynchronizer
from teach_assit.gui.feedback.generator import FeedbackGenerator
from teach_assit.gui.feedback.data_manager import DataManager
from teach_assit.gui.feedback.assessment_loader import AssessmentLoader
from teach_assit.gui.feedback.utils import extract_note_from_feedback, extract_exercise_notes
from teach_assit.core.database.db_manager import DatabaseManager

class FeedbackWidget(QWidget):
    """Widget pour l'onglet Notes & Feedback intégrant l'API Gemini"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("FeedbackWidget")
        self.setStyleSheet(MAIN_STYLE)
        
        # Initialiser les gestionnaires
        self._init_managers()
        
        # Initialiser l'interface
        self._init_ui()
        
        # Connecter les signaux
        self._connect_signals()
        
        # Charger les paramètres
        self._load_settings()
    
    def _init_managers(self):
        """Initialise les différents gestionnaires utilisés par le widget."""
        # Gestionnaire de base de données
        self.db_manager = DatabaseManager()
        
        # Gestionnaire de configuration
        self.config_manager = ConfigManager(self.db_manager)
        
        # Chargeur d'évaluations
        self.assessment_loader = AssessmentLoader()
        
        # Gestionnaire de données
        self.data_manager = DataManager()
        
        # Localisateur de fichiers d'exercices
        self.file_locator = ExerciseFileLocator(self.data_manager, self.assessment_loader)
        
        # Générateur de feedback
        self.feedback_generator = FeedbackGenerator(
            self.data_manager, 
            self.file_locator, 
            self.assessment_loader,
            self.db_manager
        )
        
        # Gestionnaire de feedback
        self.feedback_handler = FeedbackHandler(
            self,
            self.config_manager,
            self.data_manager,
            self.file_locator
        )
        
        # Synchronisateur de résultats
        self.results_synchronizer = ResultsSynchronizer(
            self.data_manager,
            self.assessment_loader
        )
    
    def _init_ui(self):
        """Initialise l'interface utilisateur."""
        # Layout principal
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setSpacing(10)
        self.main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Section d'en-tête (API Key, sélection d'étudiant)
        self.header_section = HeaderSection()
        self.main_layout.addWidget(self.header_section)
        
        # Section des exercices
        self.exercises_section = ExercisesSection()
        self.main_layout.addWidget(self.exercises_section)
        
        # Section de feedback
        self.feedback_section = FeedbackSection()
        self.main_layout.addWidget(self.feedback_section)
        
        # Ajouter un peu d'espace en bas
        self.main_layout.addStretch(1)
    
    def _connect_signals(self):
        """Connecte les signaux aux slots appropriés."""
        # Signaux de la section d'en-tête
        self.header_section.api_key_changed.connect(self._on_api_key_changed)
        self.header_section.student_changed.connect(self._on_student_changed)
        self.header_section.sync_clicked.connect(self.sync_with_results)
        self.header_section.test_api_clicked.connect(self._on_test_api_clicked)
        
        # Signaux de la section d'exercices
        self.exercises_section.exercise_selected.connect(self._on_exercise_selected)
        
        # Signaux de la section de feedback
        self.feedback_section.generate_clicked.connect(self._on_generate_clicked)
        self.feedback_section.download_clicked.connect(self._on_download_clicked)
        
        # Signaux du générateur de feedback
        self.feedback_generator.feedback_generated.connect(self._on_feedback_generated)
        self.feedback_generator.generation_error.connect(self._on_feedback_error)
        self.feedback_generator.progress_updated.connect(self._on_progress_updated)
    
    def _load_settings(self):
        """Charge les paramètres de configuration."""
        settings = self.config_manager.load_settings()
        if "api_key" in settings and settings["api_key"]:
            self.header_section.set_api_key(settings["api_key"])
    
    def _on_api_key_changed(self, api_key):
        """Appelé lorsque la clé API est modifiée."""
        self.config_manager.save_api_key(api_key)
    
    def _on_student_changed(self, index):
        """Appelé lorsque l'étudiant sélectionné change."""
        if index >= 0:
            student = self.header_section.get_current_student()
            self.update_exercises_for_student(student)
            # Effacer le feedback précédent
            self.feedback_section.set_feedback_text("")
            self.feedback_section.enable_download_button(False)
            # Activer le bouton de génération
            self.feedback_section.enable_generate_button(True)
    
    def _on_test_api_clicked(self):
        """Appelé lorsque le bouton de test de l'API est cliqué."""
        api_key = self.header_section.get_api_key()
        self.feedback_handler.test_api_connection(api_key)
    
    def _on_exercise_selected(self, row, column):
        """Appelé lorsqu'un exercice est sélectionné dans le tableau."""
        selected_exercise = self.exercises_section.get_selected_exercise()
        if selected_exercise:
            student = self.header_section.get_current_student()
            self.feedback_handler.handle_exercise_selection(student, selected_exercise)
    
    def _on_generate_clicked(self):
        """Appelé lorsque le bouton de génération de feedback est cliqué."""
        student = self.header_section.get_current_student()
        api_key = self.config_manager.get_api_key()
        exercise_ids = self.exercises_section.get_exercise_ids()
        
        # Afficher la barre de progression
        self.feedback_section.show_progress_bar(True)
        self.feedback_section.set_progress(0)
        
        # Désactiver les contrôles pendant la génération
        self._set_controls_enabled(False)
        
        # Lancer la génération
        success = self.feedback_generator.generate_feedback(api_key, student, exercise_ids)
        
        if not success:
            # Réactiver les contrôles si la génération n'a pas pu démarrer
            self._set_controls_enabled(True)
            self.feedback_section.show_progress_bar(False)
    
    def _on_download_clicked(self):
        """Appelé lorsque le bouton de téléchargement est cliqué."""
        student = self.header_section.get_current_student()
        self.feedback_handler.download_markdown(student)
    
    def _on_feedback_generated(self, feedback):
        """Appelé lorsque le feedback est généré."""
        # Afficher le feedback
        self.feedback_section.set_feedback_text(feedback)
        
        # Masquer la barre de progression
        self.feedback_section.set_progress(100)
        self.feedback_section.show_progress_bar(False)
        
        # Réactiver les contrôles
        self._set_controls_enabled(True)
        
        # Activer le bouton de téléchargement
        self.feedback_section.enable_download_button(True)
        
        # Extraire la note globale et les notes par exercice
        note = extract_note_from_feedback(feedback)
        exercise_notes = extract_exercise_notes(feedback, self.exercises_section.get_exercise_ids())
        
        # Mettre à jour les statuts des exercices avec les notes extraites
        self.exercises_section.update_exercises_status_with_notes(exercise_notes)
        
        # Mettre à jour la note affichée
        self.header_section.set_note(note)
    
    def _on_feedback_error(self, error_msg):
        """Appelé en cas d'erreur lors de la génération du feedback."""
        # Masquer la barre de progression
        self.feedback_section.set_progress(0)
        self.feedback_section.show_progress_bar(False)
        
        # Réactiver les contrôles
        self._set_controls_enabled(True)
        
        # Afficher l'erreur
        self.feedback_section.set_feedback_text(f"Erreur lors de la génération du feedback: {error_msg}")
        
        # Afficher une boîte de dialogue avec l'erreur
        QMessageBox.critical(self, "Erreur", f"Une erreur est survenue lors de la génération du feedback:\n\n{error_msg}")
    
    def _on_progress_updated(self, value):
        """Appelé lorsque la progression de la génération est mise à jour."""
        self.feedback_section.set_progress(value)
    
    def _set_controls_enabled(self, enabled):
        """Active ou désactive tous les contrôles."""
        self.header_section.enable_controls(enabled)
        self.exercises_section.enable_controls(enabled)
        self.feedback_section.enable_generate_button(enabled)
    
    def set_results_widget(self, results_widget):
        """Connecte le widget de résultats pour faciliter la synchronisation."""
        self.results_widget = results_widget
        
        if self.results_widget:
            logging.info("Widget de résultats connecté au widget de feedback")
            
            # Si le widget de résultats a un db_manager, l'utiliser
            if hasattr(results_widget, 'db_manager') and results_widget.db_manager:
                self.db_manager = results_widget.db_manager
                logging.info("DatabaseManager récupéré depuis le widget de résultats")
        
        self.data_manager.results_widget = results_widget
        
        # Synchroniser automatiquement lors de l'initialisation
        self.sync_with_results()
    
    def sync_with_results(self):
        """Synchronise la liste des étudiants avec l'onglet Résultats."""
        self.results_synchronizer.sync_with_results(
            self.results_widget,
            self.header_section.set_student_list
        )
    
    def update_exercises_for_student(self, student):
        """Met à jour la liste des exercices pour l'étudiant sélectionné."""
        if not student:
            return
            
        try:
            # Effacer la liste actuelle d'exercices
            self.exercises_section.clear_exercises()
            
            # Obtenir l'évaluation actuelle
            current_assessment = None
            if self.results_widget and hasattr(self.results_widget, 'get_current_assessment_name'):
                current_assessment = self.results_widget.get_current_assessment_name()
                logging.info(f"Évaluation actuelle détectée: {current_assessment}")
                # Définir l'ID d'évaluation actuelle pour le générateur de feedback
                self.feedback_generator.set_current_assessment(current_assessment)
            
            # 1. Obtenir les exercices depuis DataManager
            exercises = self.data_manager.get_exercises_for_student(student)
            
            # 2. Si aucun exercice n'a été trouvé, essayer d'en construire à partir des identifiants connus
            if not exercises:
                exercise_ids = self.assessment_loader.get_exercise_ids_for_assessment(current_assessment) if current_assessment else []
                
                if exercise_ids:
                    for exercise_id in exercise_ids:
                        # Essayer de trouver le fichier pour cet exercice
                        file_path = self.file_locator.find_exercise_file(student, exercise_id)
                        if file_path:
                            file_name = os.path.basename(file_path)
                            exercises.append({
                                'id': exercise_id,
                                'file': file_name,
                                'status': 'En attente',
                                'path': file_path
                            })
            
            # 3. Si toujours aucun exercice, chercher des fichiers Java
            if not exercises:
                search_dirs = []
                
                # Ajouter les dossiers de l'étudiant dans toutes les évaluations
                for td_dir in glob.glob(os.path.join(os.getcwd(), "tests", "java_samples", "*")):
                    student_dir = os.path.join(td_dir, student)
                    if os.path.exists(student_dir):
                        search_dirs.append(student_dir)
                
                for search_dir in search_dirs:
                    java_files = glob.glob(os.path.join(search_dir, "*.java"))
                    for file_path in java_files:
                        file_name = os.path.basename(file_path)
                        # Essayer de déterminer l'ID d'exercice à partir du nom de fichier
                        exercise_id = self.data_manager.get_exercise_id_from_filename(file_name)
                        if not exercise_id:
                            exercise_id = file_name.replace(".java", "")
                            
                        exercises.append({
                            'id': exercise_id,
                            'file': file_name,
                            'status': 'En attente',
                            'path': file_path
                        })
            
            # 4. Remplir le tableau avec les exercices
            for exercise in exercises:
                exercise_id = exercise.get('id', '')
                file_name = exercise.get('file', 'Non trouvé')
                status = exercise.get('status', 'En attente')
                
                self.exercises_section.add_exercise(exercise_id, file_name, status)
                
                # Stocker le chemin du fichier pour une utilisation future
                file_path = exercise.get('path', '')
                if file_path and os.path.exists(file_path):
                    self.data_manager.store_exercise_file_path(student, exercise_id, file_path)
            
            # Trier le tableau si nécessaire
            # self.exercises_section.sort_by_id()
            
            logging.info(f"Mise à jour des exercices terminée pour {student}: {len(exercises)} exercices trouvés")
            
        except Exception as e:
            logging.error(f"Erreur lors de la mise à jour des exercices: {str(e)}")
            import traceback
            logging.error(traceback.format_exc())
    
    def showEvent(self, event):
        """Appelé lorsque le widget devient visible."""
        super().showEvent(event)
        
        # Synchroniser automatiquement au premier affichage
        if self.header_section.student_combo.count() == 0:
            self.sync_with_results() 